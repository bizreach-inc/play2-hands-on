<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Play2.6-scalikejdbc3.2s on Play2 &#43; Slick / ScalikeJDBCハンズオン</title>
    <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2.html</link>
    <description>Recent content in Play2.6-scalikejdbc3.2s on Play2 &#43; Slick / ScalikeJDBCハンズオン</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>BizReach, Inc</copyright>
    
	<atom:link href="https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DBの準備</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/preparation_of_db.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/preparation_of_db.html</guid>
      <description>ツールプロジェクトの準備 h2.zip をダウンロードし、以下のようにplay2-hands-onプロジェクトと同じディレクトリに展開します。
+-/play2-hands-on | | | +-/app | | | +-/conf | | | +-... | +-/h2 | +-create.sql | +-data.mv.db | +-...  H2の起動 Windowsの場合
まず、h2/start.batをダブルクリックしてH2データベースを起動します。データベースには以下のスキーマのテーブルが作成済みの状態になっています。
Macの場合
cd h2/ sh start.sh  ※起動後、そのターミナルは閉じないでください。
モデルの自動生成 ScalikeJDBCではタイプセーフなAPIを使用するためにモデルクラスを用意する必要がありますが、ScalikeJDBCがsbtプラグインとして提供しているジェネレータを使用することでDBスキーマから自動生成することができます。
play2-hands-onプロジェクトでScalikeJDBCの自動生成ツールを使えるようにします。project/plugins.sbtに以下の設定を追加します。
libraryDependencies += &amp;quot;com.h2database&amp;quot; % &amp;quot;h2&amp;quot; % &amp;quot;1.4.196&amp;quot; addSbtPlugin(&amp;quot;org.scalikejdbc&amp;quot; %% &amp;quot;scalikejdbc-mapper-generator&amp;quot; % &amp;quot;3.2.2&amp;quot;)  また、project/scalikejdbc.propertiesというファイルを以下の内容で作成します。
# --- # jdbc settings jdbc.driver=org.h2.Driver jdbc.url=jdbc:h2:tcp://localhost/data jdbc.username=sa jdbc.password=sa jdbc.schema=PUBLIC # --- # source code generator settings generator.</description>
    </item>
    
    <item>
      <title>IDEの準備</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/preparation_of_ide.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/preparation_of_ide.html</guid>
      <description>プラグインのインストール Java8 + IntelliJは予めインストール済みとします。まずは以下の手順でIntelliJにScala開発用のプラグインを導入します。
 メニュー[IntelliJ IDEA]→[Preferences]→[Plugins]→[Install JetBrains plugin&amp;hellip;]をクリック [Scala]を選択し、右クリック[Download and Install]をクリック  ※IntelliJ Ultimate EditionはPlayプラグインを使うことができ、PlayプロジェクトをIntelliJで作成したり、HTMLテンプレートや設定ファイルなどを編集するためのエディタが追加されます。
プロジェクトのインポート IntelliJのScalaプラグインはSBTプロジェクトをネイティブサポートしており、「Import Project」をクリックし、Play2プロジェクトのルートディレクトリを選択するとSBTプロジェクトとしてインポートすることができます。
インポートする際に以下のダイアログが表示されます。初回は「Project JDK」が未選択の状態になっているかもしれません。「New&amp;hellip;」をクリックしてJDKがインストールされているディレクトリを選択してから「OK」をクリックしてください。
build.sbtを編集してライブラリを追加した場合、ウィンドウ右上に以下のようなメッセージが表示されます。
「Refresh」を選択するとプロジェクトが再インポートされ、ライブラリが自動的にインターネット経由でダウンロードされクラスパスに追加されます。また、「Enable auto-import」を選択するとbuild.sbtを変更するたびに自動的に再インポートされるようになります。</description>
    </item>
    
    <item>
      <title>JSON APIの準備</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/preparation_for_json.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/preparation_for_json.html</guid>
      <description>フロントエンドがAngularJSやスマートフォンアプリの場合、サーバサイドはJSONを返却するAPIを提供する必要があります。ここまでに作成してきたユーザ情報のCRUD処理について、Play2のJSONサポート機能を使ってJSONベースのWeb APIを実装します。
コントローラの雛形を作る controllersパッケージにJsonControllerクラスを以下の内容で作成します。ScalikeJDBCやPlay2のJSONサポートを使用するためのimport文を予め含めています。
package controllers import play.api.mvc._ import play.api.libs.json._ import play.api.libs.functional.syntax._ import javax.inject.Inject import scalikejdbc._ import models._ class JsonController @Inject()(components: ControllerComponents) extends AbstractController(components) { /** * 一覧表示 */ def list = TODO /** * ユーザ登録 */ def create = TODO /** * ユーザ更新 */ def update = TODO /** * ユーザ削除 */ def remove(id: Long) = TODO }  UserControllerとは異なり、テンプレートでの国際化機能を使わないためControllerComponentsをDIし、AbstractControllerクラスを継承します。
 POINT
 play.api.libs.json._はPlay2のJSONサポート機能を使用するために必要なimport文です   ルーティングの定義 conf/routesに以下の内容を追記します。</description>
    </item>
    
    <item>
      <title>Play 2.6 &#43; ScalikeJDBC 3.2 ハンズオン</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/introduction.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/introduction.html</guid>
      <description>目的 Play2 + ScalikeJDBC を使ってWebアプリケーションを作成するハンズオンです。
主な目的は以下の通りです。
 Scalaに触れてもらう 数時間でとりあえず動くものを作ってみる  そのため、なるべくフレームワークが提供する機能をそのまま使います。
構成 使用するフレームワークおよびバージョンは以下の通りです。
 Play 2.6.x ScalikeJDBC 3.2.x  前提条件 このハンズオンを実施するにあたっての前提条件は以下の通りです。
 JavaおよびWebアプリケーションの開発に関する基本的な知識を持っていること JDK 1.8がインストールされていること EclipseもしくはIntelliJ IDEAの最新版がインストールされていること  内容 ユーザ情報のCRUDを行う簡単なアプリケーションを作成します。
 ユーザ一覧を表示する 新規ユーザ登録を行う ユーザ情報を編集する ユーザを削除する  また、後半ではこのアプリケーションと同じCRUD処理を行うJSONベースのWeb APIも作成します。</description>
    </item>
    
    <item>
      <title>Play2のテスト</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/test_play.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/test_play.html</guid>
      <description>Play2はPlay2で開発されたアプリケーションのユニットテストのための機能を提供しています。デフォルトでHomeControllerに対するテストケースが生成されていますが、ここではハンズオンで作成したJSON APIに対するテストを作成してみましょう。
test/controllersに以下の内容でJsonControllerSpecを作成します。
package controllers import org.scalatestplus.play._ import org.scalatestplus.play.guice._ import play.api.libs.json._ import play.api.test._ import play.api.test.Helpers._ class JsonControllerSpec extends PlaySpec with GuiceOneAppPerSuite with Injecting { &amp;quot;JsonController GET&amp;quot; should { &amp;quot;request users list from the application&amp;quot; in { // Guiceからコントローラーのインスタンスを取得 val controller = inject[JsonController] // FakeRequestを使ってコントローラーのメソッドを呼び出す val result = controller.list.apply(FakeRequest()) // レスポンスのステータスを確認 status(result) mustBe OK // レスポンスのContent-Typeを確認 contentType(result) mustBe Some(&amp;quot;application/json&amp;quot;) // レスポンスのJSONを確認 val resultJson = contentAsJson(result) val expectedJson = Json.parse( &amp;quot;&amp;quot;&amp;quot;{&amp;quot;users&amp;quot;:[{&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;Taro Yamada&amp;quot;,&amp;quot;companyId&amp;quot;:1},{&amp;quot;id&amp;quot;:2,&amp;quot;name&amp;quot;:&amp;quot;Jiro Sato&amp;quot;}]}&amp;quot;&amp;quot;&amp;quot; ) resultJson mustEqual expectedJson } } }  このテストケースでは実際にHTTPリクエストを送信するのではなく、FakeRequestというダミーのリクエストを使用してコントローラーを呼び出しています。テストケース内ではテスト用のヘルパーメソッドでレスポンスの情報を取得することができるので、それらの情報が期待通りかどうかを確認することでテストを行うことができます。</description>
    </item>
    
    <item>
      <title>ScalikeJDBCのテスト</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/test_scalikejdbc.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/test_scalikejdbc.html</guid>
      <description>scalikejdbcGenではソースコード生成時に対応するテストコードも自動生成してくれます。テストコードはtest/modelsパッケージにあります。
このテストコードを少し編集して、実際にテストを動かしてみましょう。 今回はテスト用のDBh2/test.mv.dbを用意していますので、こちらを使うようにします。
まず、build.sbtにscalikejdbc-testライブラリを追加します。
libraryDependencies += &amp;quot;org.scalikejdbc&amp;quot; %% &amp;quot;scalikejdbc-test&amp;quot; % &amp;quot;3.2.2&amp;quot; % Test  次に、テスト用のDBを読み込む準備をします。方法はいくつかありますが、今回はconf/test.confというファイルを以下の内容で作成します。
include &amp;quot;application.conf&amp;quot; db.default.url=&amp;quot;jdbc:h2:tcp://localhost/test&amp;quot;  テストではこちらの設定を読み込むようbuild.sbtに以下を追加します。
javaOptions in Test += &amp;quot;-Dconfig.file=conf/test.conf&amp;quot;  初期化処理をテストコードに追加します。
class UsersSpec extends fixture.FlatSpec with Matchers with AutoRollback { // 初期化処理を追加 config.DBs.setup() val u = Users.syntax(&amp;quot;u&amp;quot;) ... }  class CompaniesSpec extends fixture.FlatSpec with Matchers with AutoRollback { // 初期化処理を追加 config.DBs.setup() val c = Companies.syntax(&amp;quot;c&amp;quot;) ... }  最後に、テストケースをハンズオンの形式に合わせて修正します。
UsersSpecにあるsaveメソッドのテストは、以下のようにTODOになっているところがあります。
it should &amp;quot;save a record&amp;quot; in { implicit session =&amp;gt; val entity = Users.</description>
    </item>
    
    <item>
      <title>ジョインの必要な処理</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_join.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_join.html</guid>
      <description>ここまではscalikejdbcGenで自動生成されたメソッドやシンプルなQueryDSLを使用してきましたが、テーブルのジョインが必要なケースについても実装してみましょう。
ユーザの一覧画面に以下のように会社名を表示するようにしてみます。
コントローラの修正 まずはUserControllerのlistメソッドを以下のように修正します。
def list = Action { implicit request =&amp;gt; DB.readOnly { implicit session =&amp;gt; // ユーザのリストを取得 val users = withSQL { select.from(Users as u).leftJoin(Companies as c).on(u.companyId, c.id).orderBy(u.id.asc) }.map { rs =&amp;gt; (Users(u)(rs), rs.intOpt(c.resultName.id).map(_ =&amp;gt; Companies(c)(rs))) }.list.apply() // 一覧画面を表示 Ok(views.html.user.list(users)) } }  外部結合したテーブルの値を取得する場合、map()メソッドでOption型に変換する必要があるという点に注意してください。以下のコードは、まず結果セットからCOMPANIESテーブルのIDカラムをintOptメソッドでOption[Int]型として取得し、値が取得できた場合のみCompaniesクラスにマッピングするという処理を行っています。
rs.intOpt(c.resultName.id).map(_ =&amp;gt; Companies(c)(rs))  なお、内部結合の場合はleftJoinの代わりにinnerJoinメソッドを使用します。この場合、map()メソッドでOption型に変換する必要はありません。
ビューの修正 続いてlist.scala.htmlを以下のように修正します。検索結果の型がList[Users]からList[(Users, Option[Companies])]に変わり、表に「会社名」という列を追加しています。
@(users: Seq[(models.Users, Option[models.Companies])])(implicit request: RequestHeader) @import helper._ @main(&amp;quot;ユーザ一覧&amp;quot;) { &amp;lt;div&amp;gt; &amp;lt;a href=&amp;quot;@routes.UserController.edit()&amp;quot; class=&amp;quot;btn btn-success&amp;quot; role=&amp;quot;button&amp;quot;&amp;gt;新規作成&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;col-xs-6&amp;quot;&amp;gt; &amp;lt;table class=&amp;quot;table table-hover&amp;quot;&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;ID&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;名前&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;会社名&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;&amp;amp;nbsp;&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; @users.</description>
    </item>
    
    <item>
      <title>プロジェクトの作成</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/create_project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/create_project.html</guid>
      <description>sbtのインストール まずはsbtをインストールします。sbtはScalaの標準的なビルドツールです。
Windowsの場合
以下のリンクからインストーラをダウンロードしてインストールします。
https://github.com/sbt/sbt/releases/download/v1.1.4/sbt-1.1.4.msi
Macの場合
Homebrewでインストールします。
brew update brew install sbt@1  どちらの場合もインストール後以下のようにしてsbtコマンドが使えること、sbtのバージョンが1.1.4以降であることを確認してください。
sbt sbtVersion [info] Loading project definition from /Users/takako.shimamoto/project [info] Set current project to takako-shimamoto (in build file:/Users/takako.shimamoto/) [info] 1.1.4  新規プロジェクト作成 コマンドプロンプトで以下のコマンドを実行します。
sbt new playframework/play-scala-seed.g8 --branch 2.6.x  プロジェクト名などを聞かれますが、ここではプロジェクト名をplay2-hands-onとし、他の項目は初期値のままプロジェクトを作成するものとします。
play2-hands-onディレクトリのbuild.sbtにORMとしてScalikeJDBCを使用するための設定を行います。
name := &amp;quot;&amp;quot;&amp;quot;play2-hands-on&amp;quot;&amp;quot;&amp;quot; organization := &amp;quot;com.example&amp;quot; version := &amp;quot;1.0-SNAPSHOT&amp;quot; lazy val root = (project in file(&amp;quot;.&amp;quot;)).enablePlugins(PlayScala) scalaVersion := &amp;quot;2.12.4&amp;quot; libraryDependencies += guice libraryDependencies += &amp;quot;org.scalatestplus.play&amp;quot; %% &amp;quot;scalatestplus-play&amp;quot; % &amp;quot;3.</description>
    </item>
    
    <item>
      <title>ユーザ一覧APIの実装</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_list_api.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_list_api.html</guid>
      <description>USERSテーブルからIDの昇順に全件取得し、ユーザ一覧をJSONで返します。
Writesの定義 Play2のJSONサポートでは、ScalaオブジェクトをJSONに変換するためのWrites、JSONをScalaオブジェクトに変換するためのReadsを定義する必要があります。
ここではUSERSテーブルを検索して取得したケースクラスのリストをJSONに変換して返却するので、USERSテーブルのUsersクラスに対応するWritesを定義しておく必要があります。画面から値を受け取るFormと同様、該当のコントローラ（ここではJsonController）のコンパニオンオブジェクトとして以下の内容を追加します。
object JsonController { // UsersをJSONに変換するためのWritesを定義 implicit val usersWrites = ( (__ \ &amp;quot;id&amp;quot; ).write[Long] and (__ \ &amp;quot;name&amp;quot; ).write[String] and (__ \ &amp;quot;companyId&amp;quot;).writeNullable[Int] )(unlift(Users.unapply)) }  Play2のJSONサポートが提供するDSLを使用してマッピングを定義していますが、DSLを使わずに以下のように記述することもできます。
implicit val usersWritesFormat = new Writes[Users]{ def writes(user: Users): JsValue = { Json.obj( &amp;quot;id&amp;quot; -&amp;gt; user.id, &amp;quot;name&amp;quot; -&amp;gt; user.name, &amp;quot;companyId&amp;quot; -&amp;gt; user.companyId ) } }   POINT
 Play2のJSONサポートではオブジェクトとJSONの変換を行うためにReadsやWritesでマッピングを定義する必要があります Play2のJSONサポートは単純なケースクラスの変換だけでなく、より複雑な変換やバリデーションなどを行うこともできます   コントローラ JsonControllerのlistメソッドを以下のように実装します。
// コンパニオンオブジェクトに定義したReads、Writesを参照するためにimport文を追加 import JsonController.</description>
    </item>
    
    <item>
      <title>ユーザ一覧の実装</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_user_list.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_user_list.html</guid>
      <description>USERSテーブルからIDの昇順に全件取得し、ユーザ一覧画面を表示します。
ビュー テンプレートはviewsパッケージに作成します。appディレクトリ配下にviews.userパッケージを作成し、以下の内容でlist.scala.htmlを作成します。
@* このテンプレートの引数 *@ @(users: Seq[models.Users])(implicit request: RequestHeader) @* テンプレートで利用可能なヘルパーをインポート *@ @import helper._ @* main.scala.htmlを呼び出す *@ @main(&amp;quot;ユーザ一覧&amp;quot;) { &amp;lt;div&amp;gt; &amp;lt;a href=&amp;quot;@routes.UserController.edit()&amp;quot; class=&amp;quot;btn btn-success&amp;quot; role=&amp;quot;button&amp;quot;&amp;gt;新規作成&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;col-xs-6&amp;quot;&amp;gt; &amp;lt;table class=&amp;quot;table table-hover&amp;quot;&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;ID&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;名前&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;&amp;amp;nbsp;&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; @* ユーザの一覧をループで出力 *@ @users.map { user =&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;@user.id&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;@routes.UserController.edit(Some(user.id))&amp;quot;&amp;gt;@user.name&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;@helper.form(CSRF(routes.UserController.remove(user.id))){ &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;削除&amp;quot; class=&amp;quot;btn btn-danger btn-xs&amp;quot;/&amp;gt; } &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; } &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/div&amp;gt; }  テンプレート一行目に(implicit request: RequestHeader)という引数が定義されていますが、これはテンプレート中で使用しているCSRFというヘルパーを使用するために必要なものです。PlayではデフォルトでCSRF対策のためのフィルタが有効になっており、フォームの送信先を指定する際に@helper.</description>
    </item>
    
    <item>
      <title>ユーザ削除APIの実装</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_delete_api.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_delete_api.html</guid>
      <description> 指定したIDのユーザをUSERSテーブルから削除します。
コントローラ JsonControllerのremoveメソッドを以下のように実装します。
def remove(id: Long) = Action { implicit request =&amp;gt; DB.localTx { implicit session =&amp;gt; // ユーザを削除 Users.find(id).foreach { user =&amp;gt; Users.destroy(user) } Ok(Json.obj(&amp;quot;result&amp;quot; -&amp;gt; &amp;quot;success&amp;quot;)) } }  実行 コマンドラインから以下のコマンドを実行してユーザが削除されることを確認してください。
curl -XPOST http://localhost:9000/json/remove/1  </description>
    </item>
    
    <item>
      <title>ユーザ登録・更新APIの実装</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_update_api.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_update_api.html</guid>
      <description>ユーザ情報をJSONで受け取り、登録もしくは更新を行います。
Readsの定義 JsonControllerのコンパニオンオブジェクトにユーザ情報を受け取るためのケースクラスと、JSONからそのケースクラスに変換するためのReadsを定義します。
object JsonController { ... // ユーザ情報を受け取るためのケースクラス case class UserForm(id: Option[Long], name: String, companyId: Option[Int]) // JSONをUserFormに変換するためのReadsを定義 implicit val userFormReads = ( (__ \ &amp;quot;id&amp;quot; ).readNullable[Long] and (__ \ &amp;quot;name&amp;quot; ).read[String] and (__ \ &amp;quot;companyId&amp;quot;).readNullable[Int] )(UserForm) }  前述のWritesと同様、DSLを使わずに以下のように記述することもできます。
implicit val userFormFormat = new Reads[UserForm]{ def reads(js: JsValue): UserForm = { UserForm( id = (js \ &amp;quot;id&amp;quot; ).asOpt[Long], name = (js \ &amp;quot;name&amp;quot; ).as[String], companyId = (js \ &amp;quot;companyId&amp;quot;).</description>
    </item>
    
    <item>
      <title>ユーザ登録・編集画面の実装</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_user_form.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_user_form.html</guid>
      <description>リクエストパラメータにIDが指定されているかどうかに応じて以下の処理を行います。
 リクエストパラメータにIDなし ⇒ 新規登録画面を表示します。 リクエストパラメータにIDあり ⇒ USERSテーブルを検索し、該当のユーザ情報を初期表示した編集画面を表示します。  フォーム 画面からの入力値を受け取るためのFormを定義します。Formは必ずしもコントローラに定義する必要はないのですが、コントローラでの処理に強く依存するため特に理由がない限りコントローラクラスのコンパニオンオブジェクトに定義するとよいでしょう。
ここではUserControllerと同じソースファイルに以下のようなコンパニオンオブジェクトを追加します。
object UserController { // フォームの値を格納するケースクラス case class UserForm(id: Option[Long], name: String, companyId: Option[Int]) // formから送信されたデータ ⇔ ケースクラスの変換を行う val userForm = Form( mapping( &amp;quot;id&amp;quot; -&amp;gt; optional(longNumber), &amp;quot;name&amp;quot; -&amp;gt; nonEmptyText(maxLength = 20), &amp;quot;companyId&amp;quot; -&amp;gt; optional(number) )(UserForm.apply)(UserForm.unapply) ) }  コンパニオンオブジェクトとは、クラスやトレイトと同じファイル内に同じ名前で定義されたオブジェクトのことで、コンパニオンオブジェクトと対応するクラスやトレイトは互いにprivateなメンバーにアクセスできるなどの特徴があります。クラスやトレイトで使用する共通的なメソッドやクラス等を括り出したりするのに使います。
 POINT
 コンパニオンオブジェクトとは、クラスと同じファイル内に同じ名前で定義されたオブジェクトのことです FormはStrutsのアクションフォームのようなものです マッピングに従ってバリデーション（後述）が行われます   ビュー 続いてviews.userパッケージにedit.scala.htmlを実装します。引数にはFormのインスタンスと、プルダウンで選択する会社情報を格納したSeqを受け取ります。
@(userForm: Form[controllers.UserController.UserForm], companies: Seq[models.Companies])(implicit request: MessagesRequestHeader) @import helper._ @main(&amp;quot;ユーザ作成&amp;quot;) { @* IDがある場合は更新処理、ない場合は登録処理を呼ぶ *@ @form(CSRF(userForm(&amp;quot;id&amp;quot;).</description>
    </item>
    
    <item>
      <title>ルーティングの定義</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/define_routing.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/define_routing.html</guid>
      <description>Bootstrapを使うための準備 sbt newコマンドで作成されたプロジェクトにはデフォルトのレイアウトテンプレートとしてapp/views/main.scala.htmlが生成されています。ここにBootstrapで使用するCSSとJavaScriptを追加します。
@(title: String)(content: Html) &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;@title&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;@routes.Assets.versioned(&amp;quot;stylesheets/main.css&amp;quot;)&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; type=&amp;quot;image/png&amp;quot; href=&amp;quot;@routes.Assets.versioned(&amp;quot;images/favicon.png&amp;quot;)&amp;quot;&amp;gt; @* ↓↓↓↓ここから追加↓↓↓↓ *@ &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; @* ↑↑↑↑ここまで追加↑↑↑↑ *@ &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; @content &amp;lt;script src=&amp;quot;@routes.Assets.versioned(&amp;quot;javascripts/main.js&amp;quot;)&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  また、デフォルトではContent-Security-Policyヘッダがdefault-src &#39;self&#39;を返すため上記で指定した外部CDNのCSSファイルやJavaScriptファイルを読み込むことができません。そこでconf/application.confに以下の設定を追加してContent-Security-Policyヘッダが出力されないようにしておきます。
play.filters.headers.contentSecurityPolicy=null  コントローラの雛形を作る controllersパッケージにUserControllerクラスを以下のように作成します。
package controllers import play.api.mvc._ import play.api.data._ import play.api.data.Forms._ import javax.inject.Inject import scalikejdbc._ import models._ class UserController @Inject()(components: MessagesControllerComponents) extends MessagesAbstractController(components) { /** * 一覧表示 */ def list = TODO /** * 編集画面表示 */ def edit(id: Option[Long]) = TODO /** * 登録実行 */ def create = TODO /** * 更新実行 */ def update = TODO /** * 削除実行 */ def remove(id: Long) = TODO }  コンストラクタに@Injectアノテーションと2つの引数が定義されていますが、これはPlay 2.</description>
    </item>
    
    <item>
      <title>削除処理の実装</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_delete_processing.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_delete_processing.html</guid>
      <description>指定したIDのユーザをUSERSテーブルから削除し、一覧画面へリダイレクトします。
コントローラ すでに一覧画面に「削除」ボタンは表示されているので、そこから呼び出されるコントローラのメソッドのみ実装します。
def remove(id: Long) = Action { implicit request =&amp;gt; DB.localTx { implicit session =&amp;gt; // ユーザを削除 Users.find(id).foreach { user =&amp;gt; Users.destroy(user) } // 一覧画面へリダイレクト Redirect(routes.UserController.list) } }  ここでもscalikejdbcGenで自動生成されたUsers.destroy()メソッドを使用して削除処理を行っています。これをQueryDSLで書き直すと以下のようになります。
withSQL { delete.from(Users).where.eq(Users.column.id, entity.id) }.update.apply()  実行 一覧画面から「削除」をクリックしてユーザ情報が削除されることを確認してください。</description>
    </item>
    
    <item>
      <title>登録・更新処理の実装</title>
      <link>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_update_processing.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bizreach.github.io/play2-hands-on/play2.6-scalikejdbc3.2/implement_update_processing.html</guid>
      <description>入力値のバリデーションを行い、エラーの有無に応じて以下の処理を行います。
 エラーあり ⇒ フォームにエラー情報をセットして入力フォームに戻ります。 エラーなし ⇒ DBへの登録・更新処理を行い、一覧画面へリダイレクトします。  コントローラ UserControllerのメソッドのうち、登録処理を行うcreateメソッドと更新処理を行うupdateメソッドを実装します。
入力フォームの値を受け取るには、userForm.bindFromRequestメソッドでリクエストの内容をFormにバインドし、foldメソッドでエラーがあった場合の処理と、OKの場合の処理を記述します。以下はcreateメソッドの実装例です。
def create = Action { implicit request =&amp;gt; DB.localTx { implicit session =&amp;gt; // リクエストの内容をバインド userForm.bindFromRequest.fold( // エラーの場合 error =&amp;gt; { BadRequest(views.html.user.edit(error, Companies.findAll())) }, // OKの場合 form =&amp;gt; { // ユーザを登録 Users.create(form.name, form.companyId) // 一覧画面へリダイレクト Redirect(routes.UserController.list) } ) } }  updateメソッドも同じように実装します。
def update = Action { implicit request =&amp;gt; DB.localTx { implicit session =&amp;gt; // リクエストの内容をバインド userForm.</description>
    </item>
    
  </channel>
</rss>